<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	<display-name>eduAdmin2c</display-name>
	<!-- 
		serlvet的匹配规则：
			1.路径精确匹配
			2.最长路径匹配
			3.扩展匹配
			4.如果容器定义了一个default servelt（即匹配路径为“/”的servlet），则会将请求交给default servlet
		/*.action:错误的匹配规则，不能即是路径匹配，也是扩展匹配
		spring mvc中dispatcherServlet配置为/*访问请求转发*.jsp和访问jsp页面的时候访问不到的原因：
			*默认在%TOMCAT_HOME%/conf/web.xml中配置了*.jsp由JspServelt来处理，当我们将spring mvc的拦截规则配置为/*的时候，按照servlet的匹配规则，则路径匹配会优先于扩展匹配，
			 导致对jsp的请求会被拦截掉。
			*当spring mvc配置为/,表示未默认servelt，只有当请求没有对应的servlet处理时，才交给它处理，当我们请求jsp时，刚好有从%TOMCAT_HOME%/conf/web.xml中继承过来的JspServlet
			 会处理对jsp请求的处理，所以会访问到jsp页面。
		
		filter的顺序为filter-mapping在web.xml中声明路径的顺序，即filter-mapping的顺序
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:applicationContext-core.xml,
			classpath:applicationContext-shiro.xml
		</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理，设置为true,表示生命周期由ServletContainer管理 -->
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<!-- filter的执行顺序是按照filter-mapping在 web.xml中定义的顺序 -->
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:applicationContext-web.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<jsp-config>
		<!-- 配置jsp不忽略el表达式 -->
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<el-ignored>false</el-ignored>
		</jsp-property-group>
	</jsp-config>
	
	<error-page>
  		<error-code>404</error-code>
  		<location>/WEB-INF/views/error/404.jsp</location>
  	</error-page>
  	<error-page>
  		<error-code>500</error-code>  	
  		<location>/WEB-INF/views/error/500.jsp</location>
  	</error-page>
  	<error-page>
  		<exception-type>java.lang.Throwable</exception-type>
  		<location>/WEB-INF/views/error/500.jsp</location>
  	</error-page>
</web-app>

